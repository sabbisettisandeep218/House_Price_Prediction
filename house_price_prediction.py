# -*- coding: utf-8 -*-
"""House price prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1izEV7ILENwiP7QwoACmymxDQXRawLx6o

### **House Price Prediction**
"""

#genreic Libraries
import numpy as np
import pandas as pd
import math
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

"""Data Preprocessing"""

#Retrevies data from dataset
house=pd.read_csv("/content/sample_data/house1.csv")

#Save the copy into another variable
house1=house

house

#information about the DataFrame
house.info()

#Description of the data in the DataFrame
house.describe()

#fillna(0) method replaces the NULL values with a  value zero
house=house.fillna(0)
house

house.info()

"""#Conversion"""

house.dtypes

house["size"]=house["size"].replace(regex=['Bedroom'],value='BHK')
#Alternative Method
# house["size"]=house["size"].str.replace('Bedroom','BHK')

house["size"]=house["size"].replace(regex=['BHK'],value='')

house["size"]=house["size"].replace(regex=['RK'],value='')

house

#To count Unique values in dataset
house['size'].value_counts()

#Convert attribute datatype from object to float
house['size']=house['size'].astype('float64')

house.dtypes

house.insert(1,"area_type_num","")

house.head()

for i in range(0,len(house["area_type"]),1):
  if(house["area_type"][i]=="Super built-up  Area"):
    house["area_type_num"][i]="1"
  elif(house["area_type"][i]=="Built-up  Area"):
    house["area_type_num"][i]="2"
  elif(house["area_type"][i]=="Plot  Area"):
    house["area_type_num"][i]="3"

house.head(10)

house.location.nunique()

house.location.unique()



house.columns

"""## Implementation"""

# X=house.drop(['price'],axis=1).values
X = house[['size','total_sqft','bath','balcony']].values
Y=house["price"].values

print(X) #independent

print(Y) #dependent

#splits arrays or matrices into random subsets for train and test data
from sklearn.model_selection import train_test_split

#test_size=0.1 means 10% of the data is used for testing and remaining 90% of data used for training
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=1)

linear_regression = LinearRegression()

linear_regression.fit(x_train,y_train) #fit the model based on the training_test

#used to predict the value of a variable based on the value of another variable
y_pred = linear_regression.predict(x_test)

print(y_pred) #predict the test set results

linear_regression.predict([[2,	1056.0,	2.0	,1.0]])

linear_regression.predict([[3	,1440.0	,2.0	,3.0]])

#to evaluate further how accurate the values are
from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

"""## Visualization and conclusion"""

plt.figure(figsize=(7,5))
plt.scatter(y_test,y_pred)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted')

pred_y_df = pd.DataFrame({'Actual':y_test,'Predicted':y_pred,'Difference':y_test-y_pred})
pred_y_df[0:20]

sns.pairplot(house)

house2=house[(house["size"]>3.0)& (house["total_sqft"]>500.0)&(house["price"]<60.0)]


print('Shape of the dataset after neglecting the outliers {}'.format(house2.shape))

house2

